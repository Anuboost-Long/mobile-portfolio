import React, { useEffect, useRef } from "react"
import { StyleSheet, View } from "react-native"
import Animated, {
  Easing,
  interpolate,
  runOnJS,
  useAnimatedProps,
  useSharedValue,
  withTiming
} from "react-native-reanimated"
import { Svg } from "react-native-svg"

import { Color } from "@/constants/color-constant"
import { Dimension } from "@/constants/dimension"

import FillAnimation from "./fill-animation"

const AnimatedSvg = Animated.createAnimatedComponent(Svg)

interface SplashAnimationProp {
  onAnimationEnd?: () => void
}

export default function SplashAnimation({
  onAnimationEnd = () => {}
}: Readonly<SplashAnimationProp>) {
  const ref = useRef<any>()

  const margin = 10
  const vWidth = 510 + margin
  const vHeight = 421 + margin
  const width = Dimension.ScreenWidth / 1.5
  const height = width * (vHeight / vWidth)
  const paths = [
    "M94.5057 42.36C100.586 27.64 109.226 22.36 120.426 26.52C123.626 19.48 126.346 15 128.586 13.08C131.146 11.16 133.706 9.72001 136.266 8.76C138.826 7.48 141.546 6.2 144.426 4.91999C147.306 3.63999 151.786 2.52 157.866 1.56001C163.946 0.600002 170.666 0.119998 178.026 0.119998C185.386 -0.199997 192.746 0.119998 200.106 1.07999C207.786 2.03999 214.186 4.11999 219.306 7.31999C231.786 14.68 234.506 26.52 227.466 42.84C228.106 42.52 227.946 42.84 226.986 43.8L222.666 51.96L219.306 56.28C217.706 57.88 212.746 67.64 204.426 85.56C197.706 98.36 190.826 111 183.786 123.48C172.266 144.92 165.226 158.68 162.666 164.76C173.866 158.68 186.826 149.88 201.546 138.36C229.386 116.92 247.146 104.12 254.826 99.96C262.506 95.8 267.786 93.24 270.666 92.28C273.866 91.32 276.906 91.16 279.786 91.8C282.666 92.12 285.706 92.92 288.906 94.2L300.906 99C308.586 101.56 312.746 110.84 313.386 126.84C313.706 142.52 310.506 154.36 303.786 162.36C274.666 200.12 241.866 225.4 205.386 238.2C194.186 242.36 182.666 245.88 170.826 248.76C187.786 250.68 203.946 261.88 219.306 282.36C231.786 299 240.746 316.12 246.186 333.72C251.946 351.32 256.426 364.44 259.626 373.08C262.826 381.4 264.106 387.8 263.466 392.28C263.146 397.08 260.426 400.6 255.306 402.84C250.506 405.4 242.186 407.8 230.346 410.04C224.906 411 213.706 404.6 196.746 390.84C189.386 384.76 181.546 378.2 173.226 371.16C164.906 363.8 156.586 356.92 148.266 350.52C129.066 335.48 115.626 327.64 107.946 327C107.306 327 106.026 326.68 104.106 326.04L95.4657 347.64C90.9857 358.2 86.3457 369.4 81.5457 381.24C77.0657 392.76 71.6257 403.16 65.2257 412.44C55.3057 419.16 43.7857 421.88 30.6657 420.6C15.6257 419 5.70566 412.92 0.90566 402.36C-2.29434 392.44 2.98566 363.32 16.7457 315C26.0257 281.08 34.0257 251.32 40.7457 225.72C47.4657 200.12 53.2257 179 58.0257 162.36C62.8257 145.4 66.3457 132.28 68.5857 123C70.8257 113.4 73.0657 104.12 75.3057 95.16C80.7457 74.36 87.1457 56.76 94.5057 42.36Z",
    "M452.634 406.2C445.914 408.12 439.514 409.08 433.434 409.08C427.354 409.4 421.114 409.72 414.714 410.04C408.634 410.36 400.154 410.52 389.274 410.52C378.394 410.52 362.074 410.2 340.314 409.56C335.194 409.88 330.074 410.04 324.954 410.04C319.834 410.04 315.034 409.08 310.554 407.16C300.634 403 293.914 393.4 290.394 378.36C288.794 371.32 287.034 366.36 285.114 363.48C282.874 360.6 281.114 357.88 279.834 355.32C276.634 350.2 276.954 341.72 280.794 329.88C284.314 318.04 288.954 303.48 294.714 286.2C300.474 268.6 307.034 250.04 314.394 230.52C331.674 184.12 347.194 147.32 360.954 120.12C366.394 107.96 371.034 97.4 374.874 88.44C379.034 79.48 382.714 71.8 385.914 65.4C389.114 58.68 390.714 55.16 390.714 54.84C393.914 42.68 406.234 32.44 427.674 24.12C448.474 15.48 467.354 13.24 484.314 17.4C503.194 22.2 511.514 34.68 509.274 54.84C504.794 74.68 498.074 94.52 489.114 114.36C480.474 134.2 470.554 155 459.354 176.76C448.154 198.52 435.994 221.56 422.874 245.88C409.754 270.2 396.794 296.6 383.994 325.08C383.674 326.36 384.314 327.48 385.914 328.44C390.074 328.12 395.834 326.84 403.194 324.6C410.874 322.36 418.714 320.44 426.714 318.84C435.034 316.92 443.194 315.96 451.194 315.96C459.194 315.96 465.914 318.04 471.354 322.2C471.034 327.96 472.474 332.6 475.674 336.12C478.874 339.32 482.074 342.52 485.274 345.72C493.274 354.04 493.914 365.08 487.194 378.84C480.794 392.28 469.274 401.4 452.634 406.2Z"
  ]
  const path2 = [
    "M120.513 26.5392C109.305 22.3762 100.659 27.66 94.5741 42.3907C87.2088 56.8011 80.8042 74.4139 75.3602 95.2289C73.1186 104.195 70.877 113.482 68.6353 123.089C66.3937 132.376 62.8712 145.505 58.0677 162.478C53.2642 179.13 47.5001 200.265 40.7752 225.884C34.0503 251.502 26.0445 281.284 16.7578 315.228C2.98783 363.583 -2.296 392.724 0.906317 402.652C5.70979 413.219 15.637 419.304 30.6879 420.905C43.8174 422.186 55.3457 419.464 65.2729 412.739C71.6776 403.452 77.1215 393.045 81.6048 381.516C86.4082 369.668 91.0516 358.46 95.5348 347.892L104.181 326.276L162.784 164.879C165.345 158.795 172.39 145.025 183.919 123.569C190.964 111.08 197.849 98.4313 204.574 85.622C212.9 67.689 217.863 57.9219 219.465 56.3208L222.827 51.9976L227.15 43.8317C228.111 42.871 228.271 42.5508 227.63 42.871C234.676 26.5392 231.954 14.6906 219.465 7.32529C214.341 4.12298 207.936 2.04147 200.251 1.08077C192.885 0.120085 185.52 -0.200142 178.155 0.120085C170.789 0.120085 164.064 0.600437 157.98 1.56114C151.896 2.52182 147.412 3.64263 144.53 4.92356C141.648 6.20449 138.926 7.48542 136.364 8.76635C133.803 9.72705 131.241 11.1681 128.679 13.0895C126.437 15.0109 123.715 19.4941 120.513 26.5392Z"
  ]
  const path3 = [
    "M201.692 138.46C186.961 149.989 133.708 186.416 122.5 192.5L68.6354 253.5C76.8013 258.143 120.5 259.5 165.5 253.5C177.349 250.618 194.326 242.536 205.534 238.373C242.041 225.563 274.865 200.265 304.006 162.478C310.731 154.472 313.933 142.623 313.613 126.932C312.972 110.92 308.809 101.634 301.124 99.0717L289.115 94.2682C285.913 92.9873 282.87 92.1867 279.988 91.8665C277.106 91.226 274.064 91.3862 270.862 92.3469C267.98 93.3076 262.696 95.8694 255.01 100.032C247.325 104.195 229.552 117.005 201.692 138.46Z"
  ]
  const path4 = [
    "M94.5057 42.36C100.586 27.64 109.226 22.36 120.426 26.52C123.626 19.48 126.346 15 128.586 13.08C131.146 11.16 133.706 9.72001 136.266 8.76C138.826 7.48 141.546 6.2 144.426 4.91999C147.306 3.63999 151.786 2.52 157.866 1.56001C163.946 0.600002 170.666 0.119998 178.026 0.119998C185.386 -0.199997 192.746 0.119998 200.106 1.07999C207.786 2.03999 214.186 4.11999 219.306 7.31999C231.786 14.68 234.506 26.52 227.466 42.84C228.106 42.52 227.946 42.84 226.986 43.8L222.666 51.96L219.306 56.28C217.706 57.88 212.746 67.64 204.426 85.56C197.706 98.36 190.826 111 183.786 123.48C172.266 144.92 165.226 158.68 162.666 164.76C173.866 158.68 186.826 149.88 201.546 138.36C229.386 116.92 247.146 104.12 254.826 99.96C262.506 95.8 267.786 93.24 270.666 92.28C273.866 91.32 276.906 91.16 279.786 91.8C282.666 92.12 285.706 92.92 288.906 94.2L300.906 99C308.586 101.56 312.746 110.84 313.386 126.84C313.706 142.52 310.506 154.36 303.786 162.36C274.666 200.12 241.866 225.4 205.386 238.2C194.186 242.36 182.666 245.88 170.826 248.76C187.786 250.68 203.946 261.88 219.306 282.36C231.786 299 240.746 316.12 246.186 333.72C251.946 351.32 256.426 364.44 259.626 373.08C262.826 381.4 264.106 387.8 263.466 392.28C263.146 397.08 260.426 400.6 255.306 402.84C250.506 405.4 242.186 407.8 230.346 410.04C224.906 411 213.706 404.6 196.746 390.84C189.386 384.76 181.546 378.2 173.226 371.16C164.906 363.8 156.586 356.92 148.266 350.52C129.066 335.48 115.626 327.64 107.946 327C107.306 327 106.026 326.68 104.106 326.04L95.4657 347.64C90.9857 358.2 86.3457 369.4 81.5457 381.24C77.0657 392.76 71.6257 403.16 65.2257 412.44C55.3057 419.16 43.7857 421.88 30.6657 420.6C15.6257 419 5.70566 412.92 0.90566 402.36C-2.29434 392.44 2.98566 363.32 16.7457 315C26.0257 281.08 34.0257 251.32 40.7457 225.72C47.4657 200.12 53.2257 179 58.0257 162.36C62.8257 145.4 66.3457 132.28 68.5857 123C70.8257 113.4 73.0657 104.12 75.3057 95.16C80.7457 74.36 87.1457 56.76 94.5057 42.36Z"
  ]
  const path5 = [
    "M452.634 406.2C445.914 408.12 439.514 409.08 433.434 409.08C427.354 409.4 421.114 409.72 414.714 410.04C408.634 410.36 400.154 410.52 389.274 410.52C378.394 410.52 362.074 410.2 340.314 409.56C335.194 409.88 330.074 410.04 324.954 410.04C319.834 410.04 315.034 409.08 310.554 407.16C300.634 403 293.914 393.4 290.394 378.36C288.794 371.32 287.034 366.36 285.114 363.48C282.874 360.6 281.114 357.88 279.834 355.32C276.634 350.2 276.954 341.72 280.794 329.88C284.314 318.04 288.954 303.48 294.714 286.2C300.474 268.6 307.034 250.04 314.394 230.52C331.674 184.12 347.194 147.32 360.954 120.12C366.394 107.96 371.034 97.4 374.874 88.44C379.034 79.48 382.714 71.8 385.914 65.4C389.114 58.68 390.714 55.16 390.714 54.84C393.914 42.68 406.234 32.44 427.674 24.12C448.474 15.48 467.354 13.24 484.314 17.4C503.194 22.2 511.514 34.68 509.274 54.84C504.794 74.68 498.074 94.52 489.114 114.36C480.474 134.2 470.554 155 459.354 176.76C448.154 198.52 435.994 221.56 422.874 245.88C409.754 270.2 396.794 296.6 383.994 325.08C383.674 326.36 384.314 327.48 385.914 328.44C390.074 328.12 395.834 326.84 403.194 324.6C410.874 322.36 418.714 320.44 426.714 318.84C435.034 316.92 443.194 315.96 451.194 315.96C459.194 315.96 465.914 318.04 471.354 322.2C471.034 327.96 472.474 332.6 475.674 336.12C478.874 339.32 482.074 342.52 485.274 345.72C493.274 354.04 493.914 365.08 487.194 378.84C480.794 392.28 469.274 401.4 452.634 406.2Z"
  ]

  const progress = useSharedValue(0)

  const svg1 = useAnimatedProps(() => {
    return {
      opacity: interpolate(progress.value, [0, 0.25, 1], [0, 1, 1])
    }
  })
  const svg2 = useAnimatedProps(() => {
    return {
      opacity: interpolate(progress.value, [0.25, 0.5, 1], [0, 1, 1])
    }
  })
  const svg3 = useAnimatedProps(() => {
    return {
      opacity: interpolate(progress.value, [0.5, 0.75, 1], [0, 1, 1])
    }
  })
  const svg4 = useAnimatedProps(() => {
    return {
      opacity: interpolate(progress.value, [0.75, 1], [0, 1])
    }
  })

  useEffect(() => {
    animate()
  })

  const animate = () => {
    progress.value = withTiming(
      1,
      {
        duration: 4000,
        easing: Easing.inOut(Easing.ease)
      },
      () => {
        runOnJS(onAnimationEnd)()
      }
    )
  }

  return (
    <View style={styles.container}>
      <Svg
        width={width}
        height={height}
        viewBox={[-margin / 2, -margin / 2, vWidth, vHeight].join(" ")}
      >
        {paths.map((d) => (
          <FillAnimation d={d} key={d} strokeWidth={10} />
        ))}
      </Svg>
      <AnimatedSvg
        animatedProps={svg1}
        ref={ref}
        style={styles.layer}
        width={width}
        height={height}
        fill={Color.WHITE}
        viewBox={[-margin / 2, -margin / 2, vWidth, vHeight].join(" ")}
      >
        {path2.map((d) => (
          <FillAnimation d={d} key={d} fill={Color.WHITE} />
        ))}
      </AnimatedSvg>
      <AnimatedSvg
        animatedProps={svg2}
        ref={ref}
        style={styles.layer}
        width={width}
        height={height}
        fill={Color.WHITE}
        viewBox={[-margin / 2, -margin / 2, vWidth, vHeight].join(" ")}
      >
        {path3.map((d) => (
          <FillAnimation d={d} key={d} fill={Color.WHITE} />
        ))}
      </AnimatedSvg>
      <AnimatedSvg
        animatedProps={svg3}
        ref={ref}
        style={styles.layer}
        width={width}
        height={height}
        fill={Color.WHITE}
        viewBox={[-margin / 2, -margin / 2, vWidth, vHeight].join(" ")}
      >
        {path4.map((d) => (
          <FillAnimation d={d} key={d} fill={Color.WHITE} />
        ))}
      </AnimatedSvg>
      <AnimatedSvg
        animatedProps={svg4}
        ref={ref}
        style={styles.layer}
        width={width}
        height={height}
        fill={Color.WHITE}
        viewBox={[-margin / 2, -margin / 2, vWidth, vHeight].join(" ")}
      >
        {path5.map((d) => (
          <FillAnimation d={d} key={d} fill={Color.WHITE} />
        ))}
      </AnimatedSvg>
    </View>
  )
}

const styles = StyleSheet.create({
  container: { alignSelf: "center" },
  layer: {
    position: "absolute"
  }
})
